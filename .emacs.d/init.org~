#+TITLE: Mi configuración de Emacs
#+AUTHOR: Fernando Ugalde Ubalde
#+EMAIL:<f.ugalde@outlook.com>
#+PROPERTY: header-args :tangle ./init.el

* Optimización
Cosas para mejorar el rendimiento de emacs.
** Recoletor de basura
No entiendo bien como funciona, pero supongo que es como en los lenguajes de programación que tienen recolectores de basura.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

** Eliminación de archivos
Mandamos los archivos a la papelara, no los eliminamos del todo.

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
#+end_src

* Paquetes
** Servidores de los paquetes
Servidores de donde se descargan los paquetes.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("gnu" . "https://elpa.gnu.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Gestor de paquetes
La utilización de ~use-package~ como gestor de paquetes para descargarlos.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
      (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
  (use-package diminish)
  (diminish 'org-indent-mode)
  (diminish 'eldoc-mode)
#+end_src

* Keybindings
Atajos de teclado que se utilizan en emacs y personalización de que se ejecuta.
** Tecla <esc>
Tecla ~<esc>~ utilizarla para cancelar las cosas.

#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** General
Paquete que usa teclas en general para después dependiendo del entorno (por default es en todo emacs) despliegue ciertos comandos. Como atajo global.

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer leader-keys
                            :keymaps '(normal insert visual emacs)
                            :prefix "SPC"
                            :global-prefix "C-SPC")
    (leader-keys
      "t" '(:ignore t :which-key "toggles theme")
      "tt" '(counsel-load-theme :which-key "choose theme")))
#+end_src

* IU
** Emacs configuration
Configuraciones que se pueden modificar con Emacs.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ;; Desactiva la pantalla de inicio.
  (setq toggle-truncate-lines nil) ;; Trunca las lineas para que sean visibles.
  (scroll-bar-mode -1)        ; Disable scroll bar
  (tooltip-mode -1)           ; Disable tooltips.
  (tool-bar-mode -1)          ; Disable tool bar.
  (set-fringe-mode 10)        ; Give some breathing room.
  (fset 'yes-or-no-p 'y-or-n-p) ;; Change yes - y and no - n
  (setq confirm-kill-emacs nil) ;; Confirm kill buffer
  (menu-bar-mode -1)          ; Disable the menu bar
#+end_src

** Fonts
Font que se usará para Emacs.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Jetbrains Mono" :height 120) ;; default font
  (set-face-attribute 'fixed-pitch nil :font "Jetbrains Mono" :height 110) ;; programming font
  (set-face-attribute 'variable-pitch nil :font "Cabin" :height 120 :weight 'regular) ;; notes font
#+end_src

** Temas
Temas los cuales usaremos.
*** Doom themes
Los temas de la versión ~doom-emacs~.

#+begin_src emacs-lisp
  (use-package doom-themes)
#+end_src

*** Horario
Cambia el tema de acuerdo a la hora del día.

#+begin_src emacs-lisp
  ;; Loading theme based on the time.
  (let ((hour (string-to-number (substring (current-time-string) 11 13))))
    (if (< hour 9)
        (load-theme 'doom-moonlight t)
      (load-theme 'doom-tomorrow-day t)))
#+end_src

** Iconos
Iconos para mejorar el aspecto de emacs.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :diminish
    :if (display-graphic-p))
#+end_src

** Dired
Configuraciones para que ~dired-mode~ se vea mejor.

#+begin_src emacs-lisp
  (require 'dired)
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  (setq dired-listing-switches
        "-AFghov --group-directories-first --time-style=long-iso")
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
  (use-package dired-subtree
    :ensure t
    :after dired
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)
                ("<C-tab>" . dired-subtree-cycle)
                ("<S-iso-lefttab>" . dired-subtree-remove)))

#+end_src

** Información
Paquete que pone información sobre los métodos, variables, etc.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 1))
#+end_src

** Centrar
Paquete para centrar emacs siempre.

#+begin_src emacs-lisp
  (use-package centered-cursor-mode
    :diminish
    :demand
    :config
    (global-centered-cursor-mode))
#+end_src

* Autocompletado
Sistemas de busqueda y completado de emacs.
** Vertico
Sistema que muestras los autocompletados que están disponibles.

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+end_src

** Consult
Para visualizar mejor el cambio de buffers y además la búsqueda dentro del archivo.

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :bind (("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("M-s l" . consult-line)))
#+end_src

** Orderless
Sistema de autocompletado para las búsquedas dentro del sistema emacs.

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless))
    (completion-category-overrides '(
                                     (file (styles basic string))
                                     (buffer (styles basic string))
                                     (info-menu (styles basic string)))))
#+end_src

* Org
** Setup
Configuración de ~org-mode~ antes de iniciarlo.

#+begin_src emacs-lisp
  (defun org-setup ()
    (org-indent-mode t)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (diminish 'org-indent-mode)
    (diminish 'buffer-face-mode))
#+end_src

** Instalación
Instalación de ~org~ desde el servidor de ~gnu~.

#+begin_src emacs-lisp
  (use-package org :pin gnu
    :diminish org-src-mode
    :diminish visual-line-mode
    :hook (org-mode . org-setup)
    :hook (org-mode . org-font-setup)
    :custom
    (org-ellipsis " ▾ ") ;Other options  ⬎ ⤵
    :config
    (setq org-cycle-separator-lines 2
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-startup-folded t
          org-pretty-entities t ;; simbolos de org
          org-src-preserve-indentation nil
          org-hide-block-startup t
          org-hidden-keywords (quote(title author date email)))

    ;; org-agenda configuration
    (setq org-agenda-window-setup 'current-widow
          org-agenda-start-with-log-mode t
          org-log-done 'time
          org-log-into-drawer t)

    ;; org-agenda destinatin file
    (setq org-agenda-files
          '("~/Documents/OrgFiles/Tasks.org"))

    ;; org-agenda status
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n" "|" "DONE(d!)")
            (sequence "|" "WAIT(w)" "BACK(b)")))

    ;; Colors of own to-do items.
    (setq org-todo-faces
          '(("NEXT" . (:foreground "orange red" :weight bold))
            ("WAIT" . (:foreground "HotPink2" :weight bold))
            ("BACK" . (:foreground "MediumPurple3" :weight bold))))
    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; Tags of org-agenda
    (setq org-tag-alist
          '((:startgroup)
            (:endgroup)
            ("@homework" . ?H)
            ("@exams" . ?E)
            ("note" . ?n)
            ("idea" . ?i)))
    )
#+end_src

** IU Org
Configuración de la interfaz de usuario de ~org-mode~.
*** Fonts org
**** Titulos
Fonts de los titulos de org mode

#+begin_src emacs-lisp
  (with-eval-after-load 'org-faces
    (defun org-font-setup ()
      ;; Set faces for heading levels
      (dolist (face '(
                      (org-document-title . 1.7)
                      (org-document-info . 1.3)
                      (org-level-1 . 1.5)
                      (org-level-2 . 1.3)
                      (org-level-3 . 1.25)
                      (org-level-4 . 1.2)
                      (org-level-5 . 1.15)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.05)
                      (org-level-8 . 1.05)))
        (set-face-attribute (car face) nil :font "Montserrat" :weight 'bold :height (cdr face)))))
#+end_src

**** Modos de fuente
Estilos de texto dependiendo el entorno en el que se encuentre en ~org-mode~.

#+begin_src emacs-lisp
  (with-eval-after-load 'org-faces
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

*** Bullets
Bulletes de org para mejorar el cómo se ve.
**** Títulos
Las bullets de los títulos.

#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode))
  (setq org-hide-leading-stars nil
        org-superstar-leading-bullet ?\s
        org-indent-mode-turns-on-hiding-stars nil)
#+end_src

**** Listas
Las bullets de las listas.

#+begin_src emacs-lisp
  (setq org-list-allow-alphabetical t)
  (setq org-list-demote-modify-bullet
        '(("+" . "*") ("*" . "-") ("-" . "+")))
#+end_src

*** Centrar org
Paquete que centra donde escribes para escribir siempre en el centro.

#+begin_src emacs-lisp
  (defun org-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . org-visual-fill))
#+end_src

*** Énfasis
Ocultar los marcados como *negritas*,  /italicas/, _subrayado_, ~código~ y =verbatin=.

#+begin_src emacs-lisp
  (use-package org-appear
    :commands (org-appear-mode)
    :hook (org-mode . org-appear-mode)
    :init
    (setq org-hide-emphasis-markers t)
    (setq org-appear-autoemphasis t)
    (setq org-appear-autolinks t))
#+end_src

** Código en org
*** Bloques de código
Snippets para crear bloques de código en ~org-mode~.

#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("jv" .  "src java"))
  (add-to-list 'org-structure-template-alist '("lua" .  "src lua"))
  (add-to-list 'org-structure-template-alist '("r" . "src R"))
#+end_src

*** Compilación del código
Compilación de códigos que están en los bloques.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (java . t)
       (R . t)
       (python . t))))
#+end_src

*** Autotangle de la configuración
Se lleva la compilación de los bloques de código de este archivo al archivo ~init.el~.

#+begin_src emacs-lisp
  (defun tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/.emacs.d/init.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'tangle-config)))
#+end_src

** Org-ROAM
Paquete para hacer notas con el sistema zettelskate.

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Documents/RoamNotes")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)
       ("c" "Clase")
       ("ca" "Álgebra Lineal" plain
        (file "~/Documents/RoamNotes/Templates/ClassTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title} \n#+AUTHOR: Ugalde Ubaldo, Fernando. <f.ugalde@ciencias.unam.mx> \n#+DATE: %<%Y-%m-%d %a> \n#+filetags: AL1")
        :unnarrowed t)
       ("cc" "Matemáticas para las Ciencias Aplicadas" plain
        (file "~/Documents/RoamNotes/Templates/ClassTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title} \n#+AUTHOR: Ugalde Ubaldo, Fernando. <f.ugalde@ciencias.unam.mx> \n#+DATE: %<%Y-%m-%d %a> \n#+filetags: MCA3")
        :unnarrowed t)
       ("cy" "Modelado y Programación" plain
        (file "~/Documents/RoamNotes/Templates/ClassTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title} \n#+AUTHOR: Ugalde Ubaldo, Fernando. <f.ugalde@ciencias.unam.mx> \n#+DATE: %<%Y-%m-%d %a> \n#+filetags: MyP")
        :unnarrowed t)
       ("cp" "Probabilidad" plain
        (file "~/Documents/RoamNotes/Templates/ClassTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title} \n#+AUTHOR: Ugalde Ubaldo, Fernando. <f.ugalde@ciencias.unam.mx> \n#+DATE: %<%Y-%m-%d %a> \n#+filetags: P1")
        :unnarrowed t)
       ("cr" "R Programming Fundamentals" plain
        (file "~/Documents/RoamNotes/Templates/ClassTemplate.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title} \n#+AUTHOR: Ugalde Ubaldo, Fernando. <f.ugalde@ciencias.unam.mx> \n#+DATE: %<%Y-%m-%d %a> \n#+filetags: edx programming course")
        :unnarrowed t)
       )
     )
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config (org-roam-setup))
#+end_src

* Programación
Configuración para cosas de programación.
** Magit
Paquete que gestiona cosas respecto a ~git~.

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :ensure t)
#+end_src

** IU
Dar herramientas para ayudar visualmente para que se visualice todo mejor.
*** Numero de filas
Mostrar el número de las líneas del código

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  ;; Disable line number for some modes
  (dolist (mode '(org-mode-hook
                  dired-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

*** Color de brackets
Dar color a los paréntesis para que se identifiquen mejor.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)) ;; prog-mode es el modo de programación
#+end_src

*** Whitespaces
Eliminar los espacios al final del código que a veces se quedan.

#+begin_src emacs-lisp
  (add-to-list 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Lenguajes de programación
Configuración de los lenguajes de programación.
*** Java
Configuración para cuando programamos en ~Java~.

#+begin_src emacs-lisp
  (defun setup-java-mode
      (subword-mode))
  (add-hook 'java-mode-hook 'setup-java-mode)
#+end_src

*** R
Configuración para programar en ~R~. Aquí tenemos que usar el paquete de ~ESS~ que es de estadística.

#+begin_src emacs-lisp
  (use-package ess)
#+end_src

** Autocompletado
Recomendaciones de autocompletado del código.

#+begin_src emacs-lisp
  (use-package company
    :diminish
    :hook
    (java-mode . company-mode)
    (emacs-lisp-mode . company-mode)
    (python-mode . company-mode)
    (lua-mode . company-mode)
    (R-mode . company-mode)

    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 3)
    (company-idle-delay 0.0))
#+end_src

** Atajos
Creamos atajos con el teclado.

#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
    (setq yas-snippet-dirs '("~/.dotfiles/.emacs.d/snippets"))
    (yas-global-mode 1))
#+end_src

** Paréntesis
Completar los paréntesis en emacs.

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src
